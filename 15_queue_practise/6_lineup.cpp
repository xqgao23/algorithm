/**
 * Description:
 *  假设一家银行有 M 个服务窗口。窗户前面有一条黄线，将等候区分为两部分。客户排队等候的规则是：
 *	•
 *在黄线以内的区域，每个窗口前都可以排一队人，每队最多可以排K 个人，当M个窗口前的队伍都排满时，第M∗K+1 个顾客以及以后的顾客只能在黄线以外的区域等候。黄线外的所有客户统一排成一个长队。
 *	•
 *每当客户进入黄线以内时，他会选择到当前排队人数最少的窗口处排队等待办理业务。当多个窗口前排队人数最少时，客户会选择窗口编号更小的窗口处排队等待办理业务。
 *	•	第i 名客户的办理业务时长为Ti
 *	•	最开始的M 名客户将于早上08:00 被受理业务，记做0 时刻。
 *	•	假设任意窗口办理完成后，下一个客户立刻开始办理，中间的时间忽略。
 *  现在，给定所有客户办理业务所需的时间，请问所有客户办理结束的最晚时间是什么时候。（按分钟计时即可，例如最终结束时间为09:30，
 *则输出90即可）。
 *  例如，假设银行共有 2 个服务窗口，每个窗口内可以有 2 名客户排在黄线以内。
 *  现在共有 5 名客户等待办理业务，他们的业务时长分别为 1,2,6,4,3 分钟。0 时刻时，客户 1 在窗口1接受服务，客户 2 在窗口 2 接受服务，客户 3 在窗口 1 前等待，客户 4 在窗口 2 前等待，客户 5在黄线以外等待。
 *  在 1 时刻，客户 1 办完业务，客户 5 进入黄线以内，并于窗口 1 前等待。
 *  客户 2 将于 2 时刻办完业务，客户 4 将于 6 时刻
 *办完业务，客户3 将于 7 时刻办完业务，客户 5 将于 10 时刻办完业务。
 *  因此，所有客户办理结束的最晚时间是 10。
 *
 * Input:
 *  第一行包含 3 个整数，N,M,K，分别表示客户总数，窗口总数，黄线内每个队伍的最大长度。
 *  第二行包含 N 个整数，表示每个客户办理业务的所需时长（单位：分钟）
 *
 * Output:
 *  一个整数，表示所有客户办理结束的最晚时间是什么时刻。
 *
 * Hints:
 *  1≤N,M≤10<4>, ,k≤100,1≤Ti≤10<9>
 *
 */

/**
 *  Samples:
 *  1):
 *  input:
5 2 2
1 2 6 4 3
 *
 *  output:
10
 *
 */

#include <iostream>
#include <queue>
using namespace std;

typedef long long LL;
const int N = 1e4 + 10;
int n, m, k, t;
LL ans;
queue<LL> q[N]; // q[i]记录第i个窗口的每个人办完业务的时间

int main()
{
    cin >> n >> m >> k;
    for (int i = 1; i <= n; i++) {
        cin >> t;
        int idx = 1;
        if (i <= m * k) {
            for (int j = 1; j <= m; j++) {
                if (q[j].size() < q[idx].size()) {
                    idx = j;
                }
            }
        } else {
            for (int j = 1; j <= m; j++) {
                if (q[j].front() < q[idx].front()) {
                    idx = j;
                }
            }
            q[idx].pop();
        }
        LL x = t;
        if (q[idx].size()) {
            x += q[idx].back();
        }
        q[idx].push(x);
        ans = max(ans, x);
    }
    cout << ans << endl;
    return 0;
}
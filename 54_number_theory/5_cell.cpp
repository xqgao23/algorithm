/**
 * Description:
 *  Hanks 博士是 BT (Bio−Tech，生物技术) 领域的知名专家。现在，他正在为一个细胞实验做准备工作：培养细胞样本。Hanks 博士手里现在有 N 种细胞，编号从 1∼N，一个第 i 种细胞经过 1 秒钟可以分裂为 Si 个同种细胞（Si 为正整数）。现在他需要选取某种细胞的一个放进培养皿，让其自由分裂，进行培养。一段时间以后，再把培养皿中的所有细胞平均分入M 个试管，形成 M 份样本，用于实验。Hanks 博士的试管数 M 很大，普通的计算机的基本数据类型无法存储这样大的 M 值，但万幸的是，M 总可以表示为 mi1 的 m2 次方，即 M=m1<m2>，其中 m1,m2 均为基本数据类型可以存储的正整数。
 *  注意，整个实验过程中不允许分割单个细胞，比如某个时刻若培养皿中有 4 个细胞，Hanks 博士可以把它们分入 2 个试管，每试管内 2 个，然后开始实验。但如果培养皿中有 5 个细胞，博士就无法将它们均分入 2 个试管。此时，博士就只能等待一段时间，让细胞们继续分裂，使得其个数可以均分，或是干脆改换另一种细胞培养。
 *  为了能让实验尽早开始，Hanks 博士在选定一种细胞开始培养后，总是在得到的细胞"刚好可以平均分入 M 个试管"时停止细胞培养并开始实验。现在博士希望知道，选择哪种细胞培养，可以使得实验的开始时间最早。
 *
 * Input:
 *  第一行，有一个正整数 N，代表细胞种数。
 *  第二行，有两个正整数 m1,m2，以一个空格隔开，即表示试管的总数 M=m1<m2>
 *  第三行有 N 个正整数，第 i 个数 Si 表示第 i 种细胞经过 1 秒钟可以分裂成同种细胞的个数。
 *
 * Output:
 *  一个整数，表示从开始培养细胞到实验能够开始所经过的最少时间（单位为秒）。
 *  如果无论Hanks博士选择哪种细胞都不能满足要求，则输出整数−1。
 *
 * Hints:
 *  1≤N≤10000, 1≤m1≤30000, 1≤m2≤10000, 1≤Si≤2000000000, 
 *
 */

/**
 *  Samples:
 *  1):
 *  input:
1
2 1
3
 *
 *  output:
-1
 *
 *  2):
 *  input:
2
24 1
30 12
 *
 *  output:
2
 *
 */

#include <iostream>
using namespace std;
int n, m1, m2, s[10010], p[10], c[10], cnt, ans = 1e9;

int main()
{
    cin >> n >> m1 >> m2;
    for (int i = 1; i <= n; i++) {
        cin >> s[i];
    }
    if (m1 == 1) {
        cout << 0 << endl;
        return 0;
    }
    for (int i = 2; i * i <= m1; i++) {
        if (m1 % i == 0) {
            p[++cnt] = i;
            while (m1 % i == 0) {
                c[cnt]++, m1 /= i;
            }
        }
    }
    if (m1 > 1) {
        p[++cnt] = m1, c[cnt] = 1;
    }
    for (int i = 1; i <= n; i++) {
        int t = -1;
        for (int j = 1; j <= cnt; j++) {
            if (s[i] % p[j] != 0) {
                t = -1;
                break;
            }
            int k = 0;
            while (s[i] % p[j] == 0) {
                s[i] /= p[j];
                k++;
            }
            t = max(t, (c[j] * m2 + k - 1) / k);
        }
        if (t != -1) {
            ans = min(ans, t);
        }
    }
    if (ans == 1e9) {
        cout << -1 << endl;
    } else {
        cout << ans << endl;
    }
    return 0;
}
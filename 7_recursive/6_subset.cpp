/**
 * Description:
 *  小明的班级有n名学生，编号为1∼n，现在要选出一些人（数量不限），组成一个队伍参加比赛，一共有多少选择方法？要求输出每种方法选出的队伍。
 *  例如有4个人，选出编号1,2,4这三个人组成一个队伍，就是一种选择方法。我们将整个班的学生称作一个集合，选出来的队伍就叫做子集。也可以一个人也不选，这样队伍中一个人都没有，我们把这种子集称作空集。
 *  我们把编号1∼n的学生看做整数1∼n。
 * 写一个递归函数，枚举1∼n中取若干个数的每种方法（子集枚举）.
 * 对每种方法把取出的数从小到大排序，若两种方法中前k−1个数的选取情况相同，则取了第k个数的在前.
 * 例如对n=4,应该按如下顺序给出结果{1,2,3,4},{1,2,3},{1,2,4},{1,2},{1,3,4},{1,3},{1,4},{1},{2,3,4},{2,3},{2,4},{2},{3,4},{3},{4},{}
 *
 * Input:
 *  一个正整数n
 *
 * Output:
 *  输出2<n>行, 每行一个子集, 按题目要求顺序.
 *
 * Hints:
 *  1<=n<=12, 对于空集，需要输出一个空行
 */

/**
 *  Samples:
 *  1):
 *  input:
4
 *
 *  output:
1 2 3 4
1 2 3
1 2 4
1 2
1 3 4
1 3
1 4
1
2 3 4
2 3
2 4
2
3 4
3
4
 *
 */

#include <iostream>
using namespace std;
int n, p[20];

void dfs(int step)
{
    if (step > n) {
        for (int i = 1; i <= n; i++) {
            if (p[i]) {
                cout << i << " ";
            }
        }
        cout << endl;
        return;
    }
    for (int i = 1; i >= 0; i--) {
        p[step] = i;
        dfs(step + 1);
    }
}

int main()
{
    cin >> n;
    dfs(1);
    return 0;
}
/**
 * Description:
 *  小 K 是一个海港的海关工作人员，他的工作是对货物进出仓库的记录进行统计。
 *  记录分为三种：
 *  （1）0 X：入库，其中 X 是一个整数，表示一个编号为 X 的货物进入仓库。
 *  （2）1：出库，表示将入库时间离目前最近的货物出库。
 *  （3）2：查询，输出当前仓库内编号最大的货物的编号。
 *  出于分析目的，分析人员在日志中随机插入了若干第三类操作――查询操作。分析日志时，每遇到一次查询操作，都要报告出当前仓库中最大集装箱的重量。
 *
 * Input:
 *  包含 n+1 行：
 *  第一行为 1 个正整数 n，表示有 n 条记录。
 *  接下来的 n 行，每行表示 1 条记录，分别属于以下三种格式之一：
 *  入库: 0 X 一次集装箱入库操作，正整数X表示该次入库的货物的编号
 *  出库: 1 一次集装箱出库操作，（就当时而言）最后入库的集装箱出库
 *  查询: 2 一次查询操作，要求输出当前仓库内编号最大货物的编号
 *  出库时如果仓库为空你应该忽略这次操作；查询时如果仓库为空你应该输出 0。
 *
 * Output:
 *  输出若干行，对每次查询操作，用一行输出查询结果。
 *
 * Hints:
 *  n<=200000, X<=10<8>
 *
 */

/**
 *  Samples:
 *  1):
 *  input:
13
0 1
0 2
2
0 4
0 2
2
1
2
1
1
2
1
2
 *
 *  output:
2
4
4
1
0
 *
 */

#include <iostream>
#include <stack>
using namespace std;
const int N = 2e5 + 10;
int n, op, x, s[N], cnt;
stack<int> st;

int main()
{
    cin >> n;
    for (int i = 1; i <= n; i++) {
        cin >> op;
        if (op == 0) {
            cin >> x;
            st.push(x);
            s[cnt + 1] = max(s[cnt], x);
            cnt++;
        } else if (op == 1 && st.size()) {
            st.pop();
            cnt--;
        } else if (op == 2) {
            cout << s[cnt] << endl;
        }
    }
    return 0;
}
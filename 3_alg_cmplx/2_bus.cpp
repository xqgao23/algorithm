/**
 * Description:
 *  著名旅游城市 B 市为了鼓励大家采用公共交通方式出行，推出了一种地铁换乘公交车的优惠方案：
 *  1. 在搭乘一次地铁后可以获得一张优惠票，有效期为 45 分钟，在有效期内可以消耗这张优惠票，免费搭乘一次票价不超过地铁票价的公交车。在有效期内指开始乘公交车的时间与开始乘地铁的时间之差小于等于 45 分钟，即：t bus - t subway <= 45
 *  2. 搭乘地铁获得的优惠票可以累积，即可以连续搭乘若干次地铁后再连续使用优惠票搭乘公交车。
 *  3. 搭乘公交车时，如果可以使用优惠票一定会使用优惠票；如果有多张优惠票满足条件，则优先消耗获得最早的优惠票。
 *  现在你得到了小轩最近的公共交通出行记录，你能帮他算算他的花费吗?
 * 
 * Input:
 *  输入文件的第一行包含一个正整数 n，代表乘车记录的数量。
 *  接下来的 n 行，每行包含 3 个整数，相邻两数之间以一个空格分隔。第 i 行的第 1 个整数代表第 i 条记录乘坐的交通工具，0 代表地铁，1 代表公交车；第 2 个整数代表第 i 条记录乘车的票价price i；第三个整数代表第i 条记录开始乘车的时间t i（距 0 时刻的分钟数）。
 *  我们保证出行记录是按照开始乘车的时间顺序给出的，且不会有两次乘车记录出现在同一分钟。
 * 
 * Output:
 *  输出文件有一行，包含一个正整数，代表小轩出行的总花费。
 * 
 * Hints:
 *  【输入输出样例 1 说明】
 *      第一条记录，在第 3 分钟花费 10 元乘坐地铁。
 *      第二条记录，在第 46 分钟乘坐公交车，可以使用第一条记录中乘坐地铁获得的优惠票，因此没有花费。
 *      第三条记录，在第 50 分种花费 12 元乘坐地铁。
 *      第四条记录，在第 96 分钟乘坐公交车，由于距离第三条记录中乘坐地铁已超过 45 分钟，所以优惠票已失效，花费 3 元乘坐公交车。
 *      第五条记录，在第 110 分钟花费 5 元乘坐地铁。
 *      第六条记录，在第 135 分钟乘坐公交车，由于此时手中只有第五条记录中乘坐地铁获得的优惠票有效，而本次公交车的票价为 6 元，高于第五条记录中地铁的票价 5 元，所以不能使用优惠票，花费 6 元乘坐公交车。
 *      总共花费 36 元。
 *  【输入输出样例 2 说明】
 *      第一条记录，在第 1 分钟花费 5 元乘坐地铁。
 *      第二条记录，在第 16 分钟花费 20 元乘坐地铁。
 *      第三条记录，在第 23 分钟花费 7 元乘坐地铁。
 *      第四条记录，在第 31 分钟乘坐公交车，此时只有第二条记录中乘坐的地铁票价高于本次公交车票价，所以使用第二条记录中乘坐地铁获得的优惠票。
 *      第五条记录，在第 38 分钟乘坐公交车，此时第一条和第三条记录中乘坐地铁获得的优惠票都可以使用，使用获得最早的优惠票，即第一条记录中乘坐地铁获得的优惠票。
 *      第六条记录，在第 68 分钟乘坐公交车，使用第三条记录中乘坐地铁获得的优惠票。
 *      总共花费 32 元。
 *
 *   n <= 10<5>, ti <= 10<9>, 1<=pricei <= 1000
 */ 
 
/**
 *  Samples:
 *  1):
 *  input:
6
0 10 3
1 5 46
0 12 50
1 3 96
0 5 110
1 6 135
 * 
 *  output:
36
 *
 *  2):
 *  input:
6
0 5 1
0 20 16
0 7 23
1 18 31
1 4 38
1 7 68
 * 
 *  output:
32
 */

#include <cstdio>
#include <iostream>
#include <algorithm>

using namespace std;

struct node {
    int t;
    int p;
} a[100010];

int n, vis[100010], ans, last, cnt = 0;

int main()
{
    cin >> n;

    for (int i = 1; i <= n; i++) {
        int op, p, t;
        
        cin >> op >> p >> t;
        if (op == 0) {  // 地铁
            node tmp = {t, p};
            a[++cnt] = tmp;
            ans += p; // 地铁只能自己掏钱
        } else {
            bool flag = false;
            for (int j = last; j <= cnt; j++) {
                if (t - a[j].t > 45) {
                    last++;
                }

                if (!vis[j] && t - a[j].t <= 45 && a[j].p >= p) {
                    vis[j] = 1;
                    flag = true;
                    break; // 优先用最早能用的
                }
            }
            if (!flag) {
                ans += p;   // 没有可以用的优惠券
            }
        }
    }
    
    
    cout << ans << endl;
    
    return 0;
}
/**
 * Description:
 *  "数独"是一个非常流行的智力游戏.游戏中你会得到一个9×9的表格，其中一些格子中已经填写了一些1∼9的数字，你需要在剩下的格子中填上1∼9的数字，使得每行、每列和每个3×3的"宫"中,1∼9的数字各出现恰好一次.如下图是一个正确完成的数独，可以看出其中每行、每列和每个"宫"（图中每个粗线隔开的3×3区域就是"宫"）,1∼9的数字都各出现恰好一次.
 *
 * Input:
 *  输入共9行，每行9个用空格隔开的一位整数，这些数展示了需要填写完成的数独表格.
 *  保证每个数都是0∼9范围内的正整数，其中0表示需要填写.
 *  注意一个正确的数独题的解是存在且唯一的，本题的数据也保证这一点.
 *
 * Output:
 *  输出共9行，每行9个用空格隔开的整数，这些数展示了整个填写完成的数独表格.
 *  每个数应都是1∼9范围内的正整数.
 *
 * Hints:
 *  1<=n<=18，1<=k<=5
 *
 */

/**
 *  Samples:
 *  1):
 *  input:
2 0 0 0 8 0 3 0 0
0 6 0 0 7 0 0 8 4
0 3 0 5 0 0 2 0 9
0 0 0 1 0 5 4 0 8
0 0 0 0 0 0 0 0 0
4 0 2 7 0 6 0 0 0
3 0 1 0 0 7 0 4 0
7 2 0 0 4 0 0 6 0
0 0 4 0 1 0 0 0 3
 *
 *  output:
2 4 5 9 8 1 3 7 6
1 6 9 2 7 3 5 8 4
8 3 7 5 6 4 2 1 9
9 7 6 1 2 5 4 3 8
5 1 3 4 9 8 6 2 7
4 8 2 7 3 6 9 5 1
3 9 1 6 5 7 8 4 2
7 2 8 3 4 9 1 6 5
6 5 4 8 1 2 7 9 3
 *
 */

#include <cstdlib>
#include <iostream>
using namespace std;
bool r[15][15], c[15][15], g[15][15];
// r[i][j]:判断第i行是否出现过数字j
// c[i][j]:判断第i列是否出现过数字j
// g[i][j]:判断区域i是否出现过数字j
int a[15][15];

void dfs(int step)
{
    if (step > 80) {
        for (int i = 0; i <= 8; ++i) {
            for (int j = 0; j <= 8; ++j) {
                cout << a[i][j] << " \n"[j == 8];
            }
        }
        return;
    }
    int x = step / 9, y = step % 9, k = x / 3 * 3 + y / 3;
    if (a[x][y]) {
        dfs(step + 1);
    } else {
        for (int i = 1; i <= 9; ++i) {
            if (!r[x][i] && !c[y][i] && !g[k][i]) {
                a[x][y] = i;
                r[x][i] = c[y][i] = g[k][i] = 1;
                dfs(step + 1);
                r[x][i] = c[y][i] = g[k][i] = 0;
                a[x][y] = 0;
            }
        }
    }
}

int main()
{
    for (int i = 0, x; i <= 8; ++i) {
        for (int j = 0; j <= 8; ++j) {
            cin >> a[i][j];
            if (a[i][j] != 0) {
                r[i][a[i][j]] = c[j][a[i][j]] = g[i / 3 * 3 + j / 3][a[i][j]] =
                    1;
            }
        }
    }
    dfs(0);
    return 0;
}